" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j


" Space will toggle folds!
nnoremap <space> za

inoremap jj <Esc>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_cmd = 'CtrlPMixed'
"set autochdir

" Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

map §b :cd ~/Projects/rails/basement/
map §s :w<cr>
map §q :q<cr>
map zh :set hlsearch!<CR>
map zs :Gstatus<cr>
map zc :Gcommit<cr>
map zr :mksession<cr>
" set tildeop
set guifont=Menlo\ Regular:h20
set lines=32 columns=117
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set scrolloff=3 " Minimal Number of visible Lines before/after the cursor
set autoindent
set showmode
set showcmd
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set ignorecase
set smartcase
"set gdefault
"
map ,, :FufFile<cr>
map §§ :buffer<cr>
map <c-h>h :FufCoverageFile<cr>
map <c-h>b :FufBuffer<cr>
map <c-h>f :FufFile<cr>

" zs Speichert merkt sich alle offenen Fenster (Session), speichert und
" schliesst VIM, zr stellt die Session wieder her
map zs :mksession! ~/.vimsession<cr>
map zl :mksession<cr>
map §r :source ~/.vimsession<cr>

"enable shift+enter to post an end
imap <S-CR> <CR><CR>end<Esc>-cc
map <C-j> <F5>


nnoremap <C-L> ]m
"map <C-\> ]m
"map <C-j> ]m
map <D-]> ]m
map <D-[> [m
map <C-k> [m
map <C-'> [m
map <tab> ]m
map <C-\> :let @/ = ""<cr>

"nmap <M-Tab> [m<CR>
nnoremap <leader><space> :noh<cr>
"nnoremap <tab> %
"vnoremap <tab> %

"au InsertEnter * hi LineNr ctermbg=darkRed
"thisau InsertEnter * hi StatusLine guibg=white guifg=#eeeeee ctermbg=white
" au InsertEnter * hi StatusLine guibg=Red
"au InsertLeave * hi LineNr ctermbg=white
"thisnau InsertLeave * hi StatusLine guibg=#43c464 guifg=#ffffff ctermbg=green
highlight LineNr ctermfg=grey

"map! ;; <ESC>
"map! jj <ESC>
map <C-n> :NERDTreeToggle<CR>
map <C-p> :CommandT<CR>
map <C-b> :CommandTBuffer<CR>
highlight PmenuSel ctermbg=LightBlue
"highlight Normal guibg=Black guifg=White

"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
nnoremap j gj
nnoremap k gk
" Swap ; and :  Convenient.
nnoremap ; :
nnoremap : ;
inoremap <D-/> <ESC>
map <F7> :call CommentToggle()<CR>

"COLORS
set t_Co=256 "make use of 256 colors
"color railscasts
color summerfruit256

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" Show Linenumbers and color them grey
set number
" highlight LineNr ctermfg=grey
" au InsertEnter * hi StatusLine guibg=Red
" Allow switching unsaved buffers
set hidden

" Enable search while type
set incsearch

" Highlight all search matches
set hlsearch

" Necesary for lots of cool vim things
set nocompatible

" set relativenumber

 set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()

 " let Vundle manage Vundle
 " required
 Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
" non github repos
Bundle 'git://git.wincent.com/command-t.git'
" git repos on your local machine (ie. when working on your own plugin)
"Bundle 'file:///Users/gmarik/path/to/plugin'
" ...
"RUBY
Bundle 'vim-ruby/vim-ruby'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
 "Bundle 'git://github.com/vim-ruby/vim-ruby.git'
 "filetype plugin indent on     " required!
 "
 " Brief help
 " :BundleList          - list configured bundles
 " :BundleInstall(!)    - install(update) bundles
 " :BundleSearch(!) foo - search(or refresh cache first) for foo
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 "
 " see :h vundle for more details or wiki for FAQ
 " NOTE: comments after Bundle command are not allowed..

Bundle 'rking/ag.vim'
Bundle 'bling/vim-airline'
"   
"   function! HighlightSearch()
"     if &hls
"       return 'H'
"     else
"       return ''
"     endif
"   endfunction
"   
"   hi User1 guifg=#ffdad8  guibg=#880c0e ctermfg=white  ctermbg=1
"   hi User2 guifg=#000000  guibg=#F4905C ctermfg=white  ctermbg=2
"   hi User3 guifg=#292b00  guibg=#f4f597 ctermfg=white  ctermbg=3
"   hi User4 guifg=#112605  guibg=#aefe7B ctermfg=white  ctermbg=4
"   hi User5 guifg=#051d00  guibg=#7dcc7d ctermfg=white  ctermbg=5
"   hi User7 guifg=#ffffff  guibg=#880c0e ctermfg=white  ctermbg=6 gui=bold
"   hi User8 guifg=#ffffff  guibg=#5b7fbb ctermfg=white  ctermbg=7
"   hi User9 guifg=#ffffff  guibg=#810085 ctermfg=white  ctermbg=8
"   hi User0 guifg=#ffffff  guibg=#094afe ctermfg=white  ctermbg=4
"   
"   
"   set statusline=
"   set statusline+=%7*\[%n]                                  "buffernr
"   set statusline+=%1*\ %<%F\                                "File+path
"   set statusline+=%2*\ %y\                                  "FileType
"   set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
"   set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\            "Encoding2
"   set statusline+=%4*\ %{&ff}\                              "FileFormat (dos/unix..)
"   set statusline+=%5*\ %{&spelllang}\%{HighlightSearch()}\  "Spellanguage & Highlight on?
"   set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
"   set statusline+=%9*\ col:%03c\                            "Colnr
"   set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly? Top/bot
"   "highlight OverLength ctermbg=red ctermfg=white guibg=#f4f597
"   "match OverLength /\%81v.\+/

match ErrorMsg '\%>80v.\+'
"if exists('+colorcolumn')
"     set colorcolumn=80
"else
"    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
"endif
"
"
"

" let g:airline_theme='light'
